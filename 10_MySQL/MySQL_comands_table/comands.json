[
  {
    "mysql_command": "CREATE DATABASE <span>&lt;db_name&gt;</span>",
    "description": "Թույլ է տալիս ստեղծել DB",
    "example": "CREATE DATABASE myDb",
    "keyword": "CREATE DB"
  },
  {
    "mysql_command": "USE DATABASE <span>&lt;db_name&gt;</span>",
    "description": "Ընտրում է  database",
    "example": "USE DATABASE myDb",
    "keyword": "USE"
  },
  {
    "mysql_command": "DROP DATABASE <span>&lt;db_name&gt;</span>",
    "description": "Ջնջում է նշված DB-ն, ",
    "example": "DROP DATABASE myDb",
    "keyword": "DROP"
  },
  {
    "mysql_command": "SELECT * FROM <span>&lt;db_name&gt;</span>  LIMIT <span>&lt;number&gt;</span>",
    "description": "Ընտրում է նշված DB-ից  <span>&quot;number&quot;</span>, թվով դոկումենտ",
    "example": "SELECT * FROM myDb LIMIT 2;",
    "keyword": "LIMIT"
  },
  {
    "mysql_command": "ALTER DATABASE <span>&lt;db_name&gt;</span>\nREAD ONLY = 1 / 0",
    "description": "1-ը readonly է դարձնում,դրանից հետո կձախողվեն DB-ն ջնջելու կամ նոր տվյալներ ավելացնելու փորձերը։\n    0-ն հանում է բոլոր սահմնապակումները",
    "example": "",
    "keyword": "READ ONLY"
  },
  {
    "mysql_command": "CREATE TABLE <span>&lt;table_name&gt;</span> (\n key type\n...\n);",
    "description": "Ստեղծում է նշված անունով աղյուսակ(table):Ամեն հատկություն ցանկալի է գրել նոր տողից, որից հետո նշվում է նրա տիպը:  <a href=\"https://blog.devart.com/mysql-data-types.html\">all types</a>",
    "example": "CREATE TABLE <span>users</span> ( \n user_id INT,\nfirst_name VARCHAR(50),\nmaried BOOL,\ndate DATE\n);",
    "keyword": "CREATE DB"
  },
  {
    "mysql_command": "select * from <span>&lt;table_name&gt;</span>;",
    "description": "Ընտրում է ընտրված աղյուսակի բոլոր տվյալները(document)։ select կամ/և  from բառը կարելի է գրել և  փոքրատառ և մեծատառ դա չի ազդում ընտրության արդյունքի վրա։ Ընդումված է հիմնականում գրել ՄԵԾԱՏԱՌ",
    "example": "select * from users;",
    "keyword": "SELECT"
  },
  {
    "mysql_command": "RENAME TABLE <span>&lt;old_name&gt;</span> TO <span>&lt;new_table_name&gt;</span>;",
    "description": "Փոխում է table-ի անունը։",
    "example": "RENAME TABLE users TO persons;",
    "keyword": "RENAME"
  },
  {
    "mysql_command": "DROP TABLE <span>&lt;table_name&gt;</span>;",
    "description": "Ջնջում է table-ի անունը։",
    "example": "DROP TABLE persons;",
    "keyword": "DROP TABLE"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nADD COLUMN<span>&lt;new_key_name&gt;</span> <span>&lt;type&gt;</span>;",
    "description": "ALTER(փոփոխել, փոխել) հրամանը թույլ է տալիս անվանափոխել աղյուսակի ցանկացած սյունակի անուն, կամ ավելացնել նորը",
    "example": "ALTER TABLE persons\nADD COLUMN city VARCHAR(50);",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nDROP COLUMN <span>&lt;name&gt;</span>;",
    "description": "ALTER(փոփոխել, փոխել) հրամանը թույլ է տալիս անվանափոխել աղյուսակի ցանկացած սյունակի անուն, կամ ավելացնել նորը",
    "example": "ALTER TABLE persons\nDROP COLUMN city;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nRENAME COLUMN <span>&lt;old_column_name&gt;</span> TO <span>&lt;new_name&gt;</span>;",
    "description": "Փոխում է սյունակի անունը ԲԱԸՑ ՈՉ ՏԻՊԸ։ Տիպը փոխելու համար պետք է օգտվել առանձին <span>&quot;MODIFY&quot;</span> հրամանից։",
    "example": "ALTER TABLE persons\nRENAME COLUMN city TO town;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nMODIFY COLUMN <span>&lt;column_name&gt;</span> <span>&lt;new_type&gt;</span>;",
    "description": "Փոխում է սյունակի type-ը։",
    "example": "ALTER TABLE persons\nMODIFY COLUMN town VARCHAR(60);",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nMODIFY <span>&lt;column_name&gt;</span> <span>&lt;type&gt;</span>\nAFTER <span>&lt;target_column_name&gt;</span>;",
    "description": "Տեղափոխում է սյունակը աղյուսակի մեջ։Այս Օրինակով ազգանունը տեղադրում ենք անունից հետո։ Եթե սյունակը պետք է լինի առաջինը(տես հաջորդ հրամանը) պետք է օգտագործել <span>&quot;FIRST&quot;</span>։",
    "example": "ALTER TABLE persons\nMODIFY last_name VARCHAR(100)\nAFTER first_name;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nMODIFY <span>&lt;column_name&gt;</span> <span>&lt;type&gt;</span>\nFIRST;",
    "description": "Ընտրված սյունակը սարգում է աղյուսակի առաջին սյուն։",
    "example": "ALTER TABLE persons\nMODIFY last_name VARCHAR(100)\nFIRST;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "INSERT INTO <span>&lt;table_name&gt;</span>\nVALUES (value1, value2, value3, ...);",
    "description": "Ավելացնում է ընտրված table-ի մեջ <span>&lt;VALUES&gt;</span> -ի միջոցով փոխանցած տվյալները։Սյունակների հերթականությունը կարող ենք ընտրել։Բայց եթե բոլոր սյունակների համար տվյալ չփոխանցվի ապա կհարուցվի սխալ։Մենք պետք է ամբողջովին լրացնենք բելոր դաշտերը: Եթե table-ի անունը սղալ գրեք կգեներացվի  <span>&quot;Error Code 1146&quot;</span> սխալը։  Table  doesn't exist:\n",
    "example": "INSERT INTO Customers\nVALUES ('Cardinal', 'Tom B.Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
    "keyword": "N/A"
  },
  {
    "mysql_command": "INSERT INTO <span>&lt;table_name&gt;</span> (column1, column2, column3,etc)\nVALUES (...), (...), (...)",
    "description": "Այս հրամանը միանգամից ավելացնում է մի քանի տվյալներ աղյուղակի մեջ։ Տվյալների արժեքների հերթականությունը պետք է համընկնի սյուների հերթականության հետ։Եթե որևիցե տվյալ նշված սյունակների համար չփոխանցվի ապա կհարուցվի սխալ, իսկ հակառակ դեպքում այն կլինի <span>&quot;NULL&quot;</span>, կամ եթե կա DEFAULT արժեք սյունակի համար կվերցրվի այդ արժեքը։(տես 26-րդ հրամանը)",
    "example": "INSERT INTO dogs (id, name, gender)\nVALUES (1, 'AXEL', NULL),\n(1, 'AXEL', 'male');",
    "keyword": "N/A"
  },
  {
    "mysql_command": "SELECT <span>&lt;column_name_1&gt;</span>, <span>&lt;column_name_2&gt;</span>;...",
    "description": "Ընտրում է աղյուսակի մեջի <span>ԲՈԼՈՐ</span> տվյալներից միայն նշված սյունակները, որոնց քանակը կարող է լինել մեկ կամ 'n' հատ։",
    "example": "SELECT name, surname\nFROM persons;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "SELECT * FROM <span>&lt;table&gt;</span>\nWHERE<span>&lt;column_name&gt;</span> = 1",
    "description": "Ընտրում  է <span>&lt;persons&gt;</span> table-ից միայն 1 id-ով դոկումենտը։ Եթե նման id-ով դոկումենտ չլինի կվերադարձնի <span>&quot;NULL&quot;</span>: Իսկ սխալ սյաունակի ասնւնը կհարուցի <span>&quot;Error Code 1064&quot;</span> սխալը։ <span> ՛&lt;&gt;՛ </span> նշանը նշանակում է Not equal,<span>&lt; s% &gt;</span> նշանը նշանակում է սկսվում է 's' տառով",
    "example": "SELECT * FROM persons\nWHERE person_id = 1; or \nWHERE salary >= 1000; or \nWHERE salary != 1000; or \nWHERE salary IS NULL; or \nWHERE salary IS NOT NULL; or \nWHERE City IN (\"Yerevan\",\"Gyumri\"); or \nWHERE City LIKE `s%` | `%s` | `%any%` |  `_s%`;\n WHERE Price <> 18;or \nWHERE population BETWEEN 5000 AND 6000;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "... WHERE table_field <span>REGEXP</span> 'pattern';",
    "description": "REGEXP օպերատորը (կամ նրա հոմանիշը RLIKE) SQL-ում  օգտագործվում է տողային տվյալների որոնման համար: Այս օպերատորը ՛ծանր՛  դեպքքերում փոխաիրնում է օպերատոր LIKE-ին,որը ավելի ՛թեթև՛ որոնման տարբերակների համար է:",
    "example": "SELECT name,email\n              FROM Users \n              WHERE email REGEXP '@(outlook.com|live.com)$'",
    "keyword": "N/A"
  },
  {
    "mysql_command": "UPDATE <span>&lt;table_name&gt;</span>\nSET <span>&lt;column_name&gt;</span> = 2\nWHERE <span>&lt;column_name&gt;</span> = 1;",
    "description": "Թարմացնում է table-ի մեջ <span>&quot;SET&quot;</span> հրամանի միջոցով ընտրված սյունակի արժեքը այն դոկումենտում,որը իր հերթին ընտրվում է <span>&quot;WHERE&quot;</span>-ի օգնությամբ:Այս Օրինակը կթարմացի մեկ դաշտ բայց հնարավոր է նաև մի քանի արժեքների թարմացումը: <span>&quot;n&quot;</span>-ի փոխարեն կարելի է տեղադրել ցանկացած սյունակի անուն, ցանկացած արժեքով:",
    "example": "UPDATE users\nSET salary=50000, n=&quot;any&quot, ...\nWHERE users_id=1;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "UPDATE <span>&lt;table_name&gt;</span>\nSET <span>&lt;column_name&gt;</span> = 23_000;",
    "description": "Թարմացնում է table-ի մեջ <span>&quot;SET&quot;</span> հրամանի միջոցով ընտրված սյունակի արժեքը(salary) ԲՈԼՈՐ դոկումենտների համար նշանակելով նույնը:",
    "example": "UPDATE users\nSET salary=50000, n=&quot;any&quot;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "DELETE FROM <span>&lt;table_name&gt;</span>\n    WHERE <span>&lt;column_name&gt;</span> = 1; or\n    WHERE <span>&lt;column_name&gt;</span> >= 14; \n    ",
    "description": "Ջնջում է table-ի մեջ ՄԻԱՅՆ <span>&quot;WHERE&quot;</span> հրամանի միջոցով ընտրված դոկումենտը։ Վերջին տողը կջնջի 14 id-ից բարձր id ունեցող 'user'-րին: Միայն առաջին տողը եթե գրենք այն կջնջի բոլոր տվյալները աղյուսակի մեջից, բայց ոչ աղյուսակը։",
    "example": "DELETE FROM persons\nWHERE person_id=3;",
    "keyword": "N/A"
  },
  {
    "mysql_command": "CREATE TABLE <span>&lt;table_name&gt;</span> (\n    key type <span>UNIQUE</span>,\n    key type <span>NOT NULL</span>\n    key type <span>DEFAULT 0</span>\n    key type <span>UNSIGNED</span>\n    key <span>ENUM</span>(a,b,c)\n    );",
    "description": "<span>&quot;UNIQUE&quot;</span> հրամանի միջոցով նշված սյունակը հետագայում չի կարող կրկնվել, իսկ <span>&quot;NOT NULL&quot;</span> հրամանի միջոցով նշված սյունակը հետագայում չի կարող նշանակվել դատարկ կամ NULL։<span>&quot;DEFAULT&quot;</span> բանալի բառը նշանակում է համապատասխան դեֆոլտ արժեք եթե ավելացման պահին այն բաց թողնվի։<span>&quot;UNSIGNED&quot;</span> բանալի բառը նշանակում է, որ այդ դաշտը չի ընդունում բացասական արժեքներ:<span>&quot;ZEROFILL&quot;</span> բանալի բառը  0-րի լրացման գաղափարն է այսինքն int(2) տիպի ժամանակ կցուցադրվի 01 ոչ թե 1:",
    "example": "CREATE TABLE persons (\nperson_id INT <span>UNIQUE</span>, \nname VARCHAR(50) <span>NOT NULL</span>,\n age tinyInt <span>DEFAULT</span> 18 <span>UNSIGNED</span> <span>ZEROFILL</span>,\n status  <span>ENUM</span>(\"active\", \"inactive\")\n);",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nMODIFY <span>&lt;column_name&gt;</span> &lt;type&gt; NOT NULL;",
    "description": "Այս գրվածքը թույլ է տալիս արդեն ստեղծված աղյուսակի մեջ ինչ որ դաշտ նշանակենք <span>&quot;NOT NULL&quot;</span>։",
    "example": "CREATE TABLE persons (\nperson_id INT UNIQUE, \nname VARCHAR(50) NOT NULL\n);",
    "keyword": "N/A"
  },
  {
    "mysql_command": "CREATE TABLE <span>&lt;table_name&gt;</span> (\n       key type UNIQUE,\n       key type NOT NULL, \n       <span>CONSTRAINT</span> &lt;check_prefix&gt; <span>CHECK</span>(age >=18)\n       );",
    "description": "Այս գրվածքը թույլ է տալիս անմիջապես աղյուսակի ստեղծման պահին տալ վալիդացիա կոնկրետ դաշտի համար։<span>&quot;CHECK&quot;</span> բանալի բառի միջոցով Օրինակում նշանակվում է տարիքի ներքին սահման։",
    "example": "CREATE TABLE users (\n       id INT UNIQUE,\n       name VARCHAR(50) NOT NULL,\n       CONSTRAINT check_age CHECK (age >=18)\n       );",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span> (\n       ....\n       <span>ADD CONSTRAINT</span> &lt;check_prefix&gt; <span>CHECK</span>(age >=18)\n       );",
    "description": "Այս գրվածքը թույլ է տալիս արդեն առկա  աղյուսակի մեջ նշանակել  վալիդացիա կոնկրետ դաշտի համար։",
    "example": "ALTER TABLE users \n       id INT UNIQUE,\n       name VARCHAR(50) NOT NULL,\n       ADD CONSTRAINT check_age CHECK (age >=18);",
    "keyword": "ADD CONSTRAINT"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span> \n      <span>DROP CHECK </span> &lt;check_prefix&gt;",
    "description": "Այս գրվածքը թույլ է ջնջել արդեն նշանակված վալիդացիան կոնկրետ դաշտի վրայից։",
    "example": "ALTER TABLE users\nDROP CHECK  check_age;",
    "keyword": "DROP CHECK"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;table_name&gt;</span>\nALTER <span>&lt;column_name&gt;</span> SET DEFAULT &lt;def_value&gt;;",
    "description": "Այս գրվածքը թույլ է տալիս արդեն ստեղծված աղյուսակի մեջ ինչ որ դաշտին  նշանակել <span>&quot;DEFAULT&quot;</span> արժեք։",
    "example": "ALTER TABLE persons\n ALTER price SET DEFAULT 0;",
    "keyword": "ALTER"
  },
  {
    "mysql_command": "CREATE TABLE <span>&lt;table_name&gt;</span> (\n key type <span>PRIMARY KEY</span> AUTO INCREMENT\n);",
    "description": "<span>&quot;PRIMARY KEY&quot;</span> (UNIQUE + NOT NULL)։ Ամեն մի աղյուսակի մեջ կարող է լինել միայն ՄԵԿ 'PRIMARY KEY' դաշտ։Երկրորդ նման փորձը կհարուցի սխալ(1068 Multiply primary key defined):Իսկ <span>&quot;AUTO INCREMENT&quot;</span> թույլ է տալիս մեզ ստեղծելու պահին այլևս չնշել այդ դաշտի արժեքտ, այն ավտոմատ կերպով ավելանում է։",
    "example": "CREATE TABLE users ( \n user_id INT <span>PRIMARY KEY</span>,\nfirst_name VARCHAR(50)\n);",
    "keyword": "PRIMARY KEY"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;t_name&gt;</span>\nADD CONSTRAINT\nPRIMARY KEY(<span>&lt;old_column_name&gt;</span>);",
    "description": "<span>&quot;PRIMARY KEY&quot;</span> (UNIQUE + NOT NULL) դաշտ է նշանակում է արդեն ստեղծված աղյուսակի մեջ։",
    "example": "ALTER TABLE users \n    ADD CONSTRAINT\n    PRIMARY KEY(user_id);",
    "keyword": "N/A"
  },
  {
    "mysql_command": "ALTER TABLE <span>&lt;t_name&gt;</span>\nAUTO_INCREMENT = n;",
    "description": "Փոխում է աղյուսակում ավտոմատի ինկրեմենտացիայի նախնական շեմը։ Առաջին ավելացված դոկումենտը կլինի \"777\" id-ով։ ",
    "example": "ALTER TABLE users \n    AUTO_INCREMENT = 777;",
    "keyword": "AUTO_INCREMENT"
  },
  {
    "mysql_command": "CREATE TABLE <span>&lt;t_name&gt;</span>\nFOREIGN KEY(\"column_name\")\n<span>REFERENCES</span> <span>&lt;t_name&gt;</span>(\"column_name\");",
    "description": "Ստեղծելով <span>&quot;books&quot;</span> table-ը միանգամից <span>&quot;FOREIGN KEY&quot;</span> միջոցով մեկ դաշտի արժեքը հղվում է այդ նույն DB-ում առկա մեկ այլ(users) table-ին։Դրանով իսկ կապ է ստեղծվում այդ 2 աղյուսակների մեջև, որը կարելի է օգտագործել որոնումների ժամանակ։",
    "example": "CREATE TABLE books (\n    book_id INT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(60),\n    price DECIMAL(4, 2),\n    user_id INT,\n    <span>FOREIGN KEY</span> (user_id) <span>REFERENCES</span> users (id)\n    );",
    "keyword": "FOREIGN KEY"
  },
  {
    "mysql_command": "SELECT * FROM <span>ORDER BY</span> cities <span>&lt;col_name&gt;</span> ASC/DESC;",
    "description": "ՎԵրադարձնում է սորտավորված աղյուսակը ըստ տրված դաշտի",
    "example": "SELECT * FROM cities ORDER BY population ASC/DESC;",
    "keyword": "ORDER BY"
  },
  {
    "mysql_command": "SELECT <span>SUM(\"column_name\")</span> AS total_sum FROM <span>&lt;t_name&gt;</span>;",
    "description": "Վերադարձնում է նշված սյունակի ընդհանում գումարը բոլոր դոկումենտների համար։",
    "example": "SELECT SUM(profit) AS total_profit\n    FROM sales;",
    "keyword": "SUM"
  },
  {
    "mysql_command": "SELECT <span>COUNT(\"column_name\")</span> AS count FROM <span>&lt;t_name&gt;</span>;",
    "description": "Վերադարձնում է նշված սյունակի անվան հանդիպումների քանիակը աղյուսակի մեջ։",
    "example": "SELECT COUNT(*) AS count FROM Trip where plane = 'TU-134'",
    "keyword": "COUNT"
  },
  {
    "mysql_command": "SELECT <span>MAX(\"column_name\")</span> AS total_sum FROM <span>&lt;t_name&gt;</span>;",
    "description": "Միանգամից գտնում է նշված սյունակի max արժեքը։ <span>MIN</span>-ը համապատասխան ձևով կվերադարձնի մինիմում արժեքը։<span>AVG</span>-ն(average-միջին) կվերադարձնի գնի միջին թվաբանականը։ ",
    "example": "SELECT MAX/MIN/AVG(price) AS maximum\n    FROM sales;",
    "keyword": "MAX"
  },
  {
    "mysql_command": "SELECT <span>CONCAT(\"column_name\" ...)</span> AS n \n    FROM <span>&lt;t_name&gt;</span>;",
    "description": "<span>CONCAT</span> ֆունկցիան պետք է սյունակների միավորման համար։Վերադարջված արժեքը կլինի ֆունկցիայի մեջ նշված սյունակների արժեքները մեկ \"n\" սյունակ անվան տակ։ Օրինակում միավորվում է անուն ազգանունը ",
    "example": "SELECT CONCAT (name, surname) AS full_name\n    FROM users;",
    "keyword": "CONCAT"
  },
  {
    "mysql_command": "<span>CREATE TYPE</span> <span>&lt;type_name&gt;</span> AS EMUM('a', 'b', 'c');",
    "description": "<span>CREATE TYPE</span> հրամանը թույլ է տալիս typeScript-ի նման ստեղծել հետագայում օգտագործվող տիպեր, ինչը հեշտացնում է նրանց օգտագործումը:",
    "example": "<span>CREATE TYPE</span> user_status AS ENUM ('active', 'inactive');",
    "keyword": "N/A"
  }
]